{
	"signed long long integer" : {
		"prefix": "ll",
		"body": ["long long"]
	},
	"include everything" : {
		"prefix": "inc",
		"body": ["#include <bits/stdc++.h>"]
	},
	"faster cin, cout" : {
		"prefix": "fastio",
		"body": ["ios::sync_with_stdio(false); cin.tie(NULL);"]
	},
	"for in loop" : {
		"prefix": "forin",
		"body": ["for (${1:int} ${2:&i}: ${3:a}) ${4:cin >> i;}"]
	},
	"compiler optemization" : {
		"prefix": "gcc",
		"body": ["#pragma GCC optimize(\"O1,O2,O3,Ofast,unroll-loops,fast-math\")"]
	},
	"range" : {
		"prefix": "iota",
		"body": ["#define range ranges::views::iota"]
	},
	"redirect cin, cout to fileio instead of stdio" : {
		"prefix": "fileio",
		"body": [
			"ifstream cin(\"input.txt\"); std::cin.rdbuf(cin.rdbuf());",
			"ofstream cout(\"output.txt\"); std::cout.rdbuf(cout.rdbuf());"
		]
	},
	"get the maximim subarray sum" : {
		"prefix": "max_subarray_sum",
		"body": [
			"int mx = INT_MIN, c = 0;",
			"for (int i = 0; i < n; i++) c += a[i], c = (c < 0? 0: c), mx = (mx < c? c: mx);"
		]
	},
	"return the triangle of a number" : {
		"prefix": "tri",
		"body": [
			"int tri(int x) {",
			"    return (x * (x + 1)) / 2;",
			"}"
		]
	},
	"convert to binary" : {
		"prefix": "dec2bin",
		"body": [
			"string dec2bin(int n, int l){",
			"    return bitset<64> (n).to_string().substr(64 - l);",
			"}"
		]
	},
	"return the sum of inputs digits" : {
		"prefix": "sod",
		"body": [
			"int sumofdigits(int x){",
			"    int s = 0;",
			"    while (x) s += x % 10, x /= 10;",
			"    return s;",
			"}"
		]
	},
	"return wether an integer is prime" : {
		"prefix": "isPrime",
		"body": [
			"bool isPrime(int n) {",
			"    if (n < 2) return 0;",
			"    for (int i = 2, m = sqrt(n); i <= m; i++) if (!(n % i)) return 0;",
			"    return 1;",
			"}"
		]
	},
	"return factorial of an integer" : {
		"prefix": "fact",
		"body": [
			"unsigned long long Factorial(int n){",
			"    unsigned long long r = 1;",
			"    for (int i = 2; i <= n; i++) r *= i;",
			"    return r;",
			"}"
		]
	},
	"convert any base to decimal": {
		"prefix": "toDecimal",
		"body": [
		  "int toDecimal(string n, int b){",
		  "    int s = 0, p = n.size();",
		  "    for (char i: n) s += (i - (47 < i && i < 58? 48: 55)) * pow(b, --p);",
		  "    return s;",
		  "}"
		]
	},
	"convert decimal to any base": {
		"prefix": "2base",
		"body": [
		  "string decimal2Base(int n, int b){",
		  "    string r = \"\";",
		  "    int m;",
		  "    while(n) m = n % b, n /= b, r = char(m + (m > 9? 55: 48)) + r;",
		  "    return r;",
		  "}"
		]
	},
	"return nth fibonacci number starting from index 1" : {
		"prefix": "fib1", // F1 = 0, F2 = 1
		"body": [
			"int Fibonacci(int n){",
			"    if (n < 3) return n - 1; n--;",
			"    int a = 0, b = 1, c;",
			"    while (--n) c = a + b, a = b, b = c;",
			"    return c;",
			"}"
		]
	},
	"return nth fibonacci number starting from index 0" : {
		"prefix": "fib0", // F0 = 0, F1 = 1
		"body": [
			"int Fibonacci(int n){",
			"    if (n < 2) return n;",
			"    int a = 0, b = 1, c;",
			"    while (--n) c = a + b, a = b, b = c;",
			"    return c;",
			"}"
		]
	},
	"return wether an string is a palindrome" : {
		"prefix": "isPalindrome",
		"body": [
			"bool isPalindrome(string s){",
			"    int n = s.length() / 2, l = s.length() - 1;",
			"    if (!l) return 1;",
			"    for (int i = 0; i < n; i++) if (s[i] != s[l - i]) return 0;",
			"    return 1;",
			"}"
		]
	},
	"count the occurrences of a substring in a string" : {
		"prefix": "countSubstring",
		"body": [
			"int countSubstring(string sub, string s){",
			"    int c = 0;",
			"    string::size_type pos = 0;",
			"    while ((pos = s.find(sub, pos)) != string::npos)",
			"        c++, pos += sub.length(); // or pos++ for overlapping",
			"    return c;",
			"}"
		]
	},
	"standard error stream" : {
		"prefix": "stderr",
		"body": [
			"#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }",
			"void err(istream_iterator<string> it) {}",
			"template<typename T, typename... Args>",
			"void err(istream_iterator<string> it, T a, Args... args){cerr << *it << \" = \" << a << endl;err(++it, args...);}"
		]
	},
	"big integer class" : {
		"prefix": "bigint",
		"body": [
			"class bnt{string digits;public:bnt(unsigned long long n=0);bnt(string&);bnt(const char*);bnt(bnt&);friend void divide_by_2(bnt&a);friend bool Null(const bnt&);friend int Length(const bnt&);int operator[](const int)const;bnt&operator=(const bnt&);bnt&operator++();bnt operator++(int temp);bnt&operator--();bnt operator--(int temp);friend bnt&operator+=(bnt&,const bnt&);friend bnt operator+(const bnt&,const bnt&);friend bnt operator-(const bnt&,const bnt&);friend bnt&operator-=(bnt&,const bnt&);friend bool operator==(const bnt&,const bnt&);friend bool operator!=(const bnt&,const bnt&);friend bool operator>(const bnt&,const bnt&);friend bool operator>=(const bnt&,const bnt&);friend bool operator<(const bnt&,const bnt&);friend bool operator<=(const bnt&,const bnt&);friend bnt&operator*=(bnt&,const bnt&);friend bnt operator*(const bnt&,const bnt&);friend bnt&operator/=(bnt&,const bnt&);friend bnt operator/(const bnt&,const bnt&);friend bnt operator%(const bnt&,const bnt&);friend bnt&operator%=(bnt&,const bnt&);friend bnt&operator^=(bnt&,const bnt&);friend bnt operator^(bnt&,const bnt&);friend bnt sqrt(bnt&a);friend ostream&operator<<(ostream&,const bnt&);friend istream&operator>>(istream&,bnt&);friend bnt NthCatalan(int n);friend bnt NthFibonacci(int n);friend bnt Factorial(int n);friend string bnt_to_string(bnt&a);};bnt::bnt(string&s){digits=\"\";int n=s.size();for(int i=n-1;i>=0;i--){if(!isdigit(s[i]))throw(\"ERROR\");digits.push_back(s[i]-'0');}}bnt::bnt(unsigned long long nr){do{digits.push_back(nr%10);nr/=10;}while(nr);}bnt::bnt(const char*s){digits=\"\";for(int i=strlen(s)-1;i>=0;i--){if(!isdigit(s[i]))throw(\"ERROR\");digits.push_back(s[i]-'0');}}bnt::bnt(bnt&a){digits=a.digits;}bool Null(const bnt&a){if(a.digits.size()==1&&a.digits[0]==0)return true;return false;}int Length(const bnt&a){return a.digits.size();}int bnt::operator[](const int index)const{if(digits.size()<=index||index<0)throw(\"ERROR\");return digits[index];}bool operator==(const bnt&a,const bnt&b){return a.digits==b.digits;}bool operator!=(const bnt&a,const bnt&b){return!(a==b);}bool operator<(const bnt&a,const bnt&b){int n=Length(a),m=Length(b);if(n!=m)return n<m;while(n--)if(a.digits[n]!=b.digits[n])return a.digits[n]<b.digits[n];return false;}bool operator>(const bnt&a,const bnt&b){return b<a;}bool operator>=(const bnt&a,const bnt&b){return!(a<b);}bool operator<=(const bnt&a,const bnt&b){return!(a>b);}bnt&bnt::operator=(const bnt&a){digits=a.digits;return*this;}bnt&bnt::operator++(){int i,n=digits.size();for(i=0;i<n&&digits[i]==9;i++)digits[i]=0;if(i==n)digits.push_back(1);else digits[i]++;return*this;}bnt bnt::operator++(int temp){bnt aux;aux=*this;++(*this);return aux;}bnt&bnt::operator--(){if(digits[0]==0&&digits.size()==1)throw(\"UNDERFLOW\");int i,n=digits.size();for(i=0;digits[i]==0&&i<n;i++)digits[i]=9;digits[i]--;if(n>1&&digits[n-1]==0)digits.pop_back();return*this;}bnt bnt::operator--(int temp){bnt aux;aux=*this;--(*this);return aux;}bnt&operator+=(bnt&a,const bnt&b){int t=0,s,i;int n=Length(a),m=Length(b);if(m>n)a.digits.append(m-n,0);n=Length(a);for(i=0;i<n;i++){if(i<m)s=(a.digits[i]+b.digits[i])+t;else s=a.digits[i]+t;t=s/10;a.digits[i]=(s%10);}if(t)a.digits.push_back(t);return a;}bnt operator+(const bnt&a,const bnt&b){bnt temp;temp=a;temp+=b;return temp;}bnt&operator-=(bnt&a,const bnt&b){if(a<b)throw(\"UNDERFLOW\");int n=Length(a),m=Length(b);int i,t=0,s;for(i=0;i<n;i++){if(i<m)s=a.digits[i]-b.digits[i]+t;else s=a.digits[i]+t;if(s<0)s+=10,t=-1;else t=0;a.digits[i]=s;}while(n>1&&a.digits[n-1]==0)a.digits.pop_back(),n--;return a;}bnt operator-(const bnt&a,const bnt&b){bnt temp;temp=a;temp-=b;return temp;}bnt&operator*=(bnt&a,const bnt&b){if(Null(a)||Null(b)){a=bnt();return a;}int n=a.digits.size(),m=b.digits.size();vector<int>v(n+m,0);for(int i=0;i<n;i++)for(int j=0;j<m;j++){v[i+j]+=(a.digits[i])*(b.digits[j]);}n+=m;a.digits.resize(v.size());for(int s,i=0,t=0;i<n;i++){s=t+v[i];v[i]=s%10;t=s/10;a.digits[i]=v[i];}for(int i=n-1;i>=1&&!v[i];i--)a.digits.pop_back();return a;}bnt operator*(const bnt&a,const bnt&b){bnt temp;temp=a;temp*=b;return temp;}bnt&operator/=(bnt&a,const bnt&b){if(Null(b))throw(\"Arithmetic Error: Division By 0\");if(a<b){a=bnt();return a;}if(a==b){a=bnt(1);return a;}int i,lgcat=0,cc;int n=Length(a),m=Length(b);vector<int>cat(n,0);bnt t;for(i=n-1;t*10+a.digits[i]<b;i--){t*=10;t+=a.digits[i];}for(;i>=0;i--){t=t*10+a.digits[i];for(cc=9;cc*b>t;cc--);t-=cc*b;cat[lgcat++]=cc;}a.digits.resize(cat.size());for(i=0;i<lgcat;i++)a.digits[i]=cat[lgcat-i-1];a.digits.resize(lgcat);return a;}bnt operator/(const bnt&a,const bnt&b){bnt temp;temp=a;temp/=b;return temp;}bnt&operator%=(bnt&a,const bnt&b){if(Null(b))throw(\"Arithmetic Error: Division By 0\");if(a<b){return a;}if(a==b){a=bnt();return a;}int i,lgcat=0,cc;int n=Length(a),m=Length(b);vector<int>cat(n,0);bnt t;for(i=n-1;t*10+a.digits[i]<b;i--){t*=10;t+=a.digits[i];}for(;i>=0;i--){t=t*10+a.digits[i];for(cc=9;cc*b>t;cc--);t-=cc*b;cat[lgcat++]=cc;}a=t;return a;}bnt operator%(const bnt&a,const bnt&b){bnt temp;temp=a;temp%=b;return temp;}bnt&operator^=(bnt&a,const bnt&b){bnt Exponent,Base(a);Exponent=b;a=1;while(!Null(Exponent)){if(Exponent[0]&1)a*=Base;Base*=Base;divide_by_2(Exponent);}return a;}bnt operator^(bnt&a,bnt&b){bnt temp(a);temp^=b;return temp;}istream&operator>>(istream&in,bnt&a){string s;in>>s;int n=s.size();for(int i=n-1;i>=0;i--){if(!isdigit(s[i]))throw(\"INVALID NUMBER\");a.digits[n-i-1]=s[i];}return in;}ostream&operator<<(ostream&out,const bnt&a){for(int i=a.digits.size()-1;i>=0;i--)cout<<(short)a.digits[i];return cout;}void divide_by_2(bnt&a){int add=0;for(int i=a.digits.size()-1;i>=0;i--){int digit=(a.digits[i]>>1)+add;add=((a.digits[i]&1)*5);a.digits[i]=digit;}while(a.digits.size()>1&&!a.digits.back())a.digits.pop_back();}",
			"bnt sqrt(bnt&a){bnt left(1),right(a),v(1),mid,prod;divide_by_2(right);while(left<=right){mid+=left;mid+=right;divide_by_2(mid);prod=(mid*mid);if(prod<=a){v=mid++;left=mid;}else right=--mid;mid=bnt();}return v;}",
			"bnt NthCatalan(int n){bnt a(1),b;for(int i=2;i<=n;i++)a*=i;b=a;for(int i=n+1;i<=2*n;i++)b*=i;a*=a;a*=(n+1);b/=a;return b;}",
			"bnt NthFibonacci(int n){bnt a(1),b(1),c;if(!n--)return c;while(n--){c=a+b;b=a;a=c;}return b;}",
			"bnt Factorial(int n){bnt f(1);for(int i=2;i<=n;f*=i++);return f;}",
			"string bnt_to_string(bnt&a){string s=\"\";for(int i=a.digits.size()-1;i>=0;i--)s+=(char)(a.digits[i]+'0');return s;}"
		]
	},
	"combination (N choose K)" : {
		"prefix": "NCR",
		"body": [
			"unsigned ncr(unsigned n, unsigned k){",
			"    if (k > n) return 0;",
			"    if (k * 2 > n) k = n - k;",
			"    if (k == 0) return 1;",
			"    int r = n;",
			"    for (int i = 2; i <= k; i++) r *= (n - i + 1), r /= i;",
			"    return r;",
			"}"
		]
	},
	"permutation" : {
		"prefix": "NPR",
		"body": [
			"unsigned long long npr(int n, int r){",
			"    unsigned long long a = 1;",
			"    for (int i = n - r + 1; i <= n; i++) a *= i;",
			"    return a;",
			"}"
		]
	},
	"codeforces template" : {
		"prefix": "cf",
		"body": [
			"#include <bits/stdc++.h>", // include everything
			"using namespace std;",
			"#define int long long",
			"main() { ios::sync_with_stdio(false); cin.tie(NULL);", // fastio
			"    int n;",
			"    cin >> n;",
			"}"
		]
	},
	"test cases template" : {
		"prefix": "cft",
		"body": [
			"#include <bits/stdc++.h>", // include everything
			"using namespace std;",
			"#define int long long",
			"void solve(){",
			"    int n;",
			"    cin >> n;",
			"}",
			"main() { ios::sync_with_stdio(false); cin.tie(NULL);", // fastio
			"    int t;",
			"    cin >> t;",
			"    while (t--){",
			"        solve();",
			"        cout << endl;",
			"    }",
			"}"
		]
	}
}
